# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it here:
# https://github.com/bevry/cson#what-is-cson

'.source':
  'shebang':
    'prefix': '#'
    'body':   '#!/usr/bin/env ${0:lang}'

# --- CoffeeScript ---
'.source.coffee':
  'Atom snippets':
    'prefix': 'snip'
    'body':   '''
      '.source.${1:ext}':
        '${2:name}':
          'prefix': '$3'
          'body':   '$4'
    '''
  'Atom snippet':
    'prefix': 'snipns'
    'body':   '''
    '${1:name}':
      'prefix': '$2'
      'body':   '$3'
    '''
  'function':
    'prefix': 'fun'
    'body':   '($1) -> \n\t#$0'
  'describe (BDD)':
    'prefix': 'describe'
    'body':   "describe '${1:desc}', ->\n\t#$0"
  'it (BDD)':
    'prefix': 'it'
    'body':   "it 'should $1', ->\n\t#$0"

# --- JavaScript ---
'.source.js':
  'each':
    'prefix': 'each'
    'body':   'each(function(${1:arg}) {\n\t$0\n})'
  'anonymous func':
    'prefix': 'afun'
    'body':   'function ($1) {\n\t$0\n}'
  'closure':
    'prefix': 'closure'
    'body':   '(function () {\n\t$0\n})();'
  'describe (BDD)':
    'prefix': 'describe'
    'body':   "describe('${1:desc}', () => {\n\t$0\n});"
  'it (BDD)':
    'prefix': 'it'
    'body':   "it('should $1', () => {\n\t$0\n});"

# --- Python --
'.source.python':
  'print':
    'prefix': 'print'
    'body':   'print($0)'
  'with open':
    'prefix': 'with open'
    'body':   'with open("${1:file}") as f:\n\tpass$0'
  'class':
    'prefix': 'class'
    'body':   '''
      class ${1:Class}:
      \t"""docstring"""
      \tdef __init__(self, args):
      \t\tself.args = args
    '''

# --- Ruby --
'.source.ruby':
  'require':
    'prefix': 'req'
    'body':   "require '$1'$0"
  'tap':
    'prefix': 'tap'
    'body':   'tap { |${1:elem}| $2 }'
  'rescue':
    'prefix': 'rescue'
    'body':   '''
      begin
        #$0
      rescue => e
        #
      end
    '''
  'TestUnit':
    'prefix': 'test'
    'body':   '''
      test "${1:AAA should BBB}" do
      \t#$0
      end
    '''

# --- Elixir ---
'.source.elixir':
  '|>':
    'prefix': 'pipe'
    'body':   '|> '
  '->':
    'prefix': 'arrow'
    'body':   '->\n\t'
  'IO.inspect':
    'prefix': 'IO.inspect'
    'body':   'IO.inspect'
  'IO.puts':
    'prefix': 'IO.puts'
    'body':   'IO.puts'
  'oneline if':
    'prefix': 'if:'
    'body':   'if $1, do: $0'
  'oneline def':
    'prefix': 'def:'
    'body':   'def $1, do: $0'
  'anonymous func':
    'prefix': 'fn'
    'body':   'fn ${1:arg} -> $2 end$0'
  'anonymous func &':
    'prefix': 'afn'
    'body':   '&(&1$1)$0'
  'import':
    'prefix': 'import'
    'body':   'import ${1:Module}$0'
  'import only':
    'prefix': 'import only'
    'body':   'import ${1:Module}, only: [${2:function}: ${3:arity}]$0'
  'import except':
    'prefix': 'import except'
    'body':   'import ${1:Module}, except: [${2:function}: ${3:arity}]$0'
  'try do … rescue … end':
    'prefix': 'rescue'
    'body':   'try do\n\t$1\nrescue\n\te in RuntimeError -> e$2\nend$0'
  'try do … catch … end':
    'prefix': 'catch'
    'body':   'try do\n\t$1\ncatch\n\tx -> "Got #{x}"$2\nend$0'
  'receive do … end':
    'prefix': 'receive'
    'body':   'receive do\n  $0\nend'
  'after ->':
    'prefix': 'after'
    'body':   'after ${1:time} ->\n\t$0'
  '@doc':
    'prefix': 'doc'
    'body':   '@doc """$0\n"""'
  '@moduledoc':
    'prefix': 'mdoc'
    'body':   '@moduledoc """$0\n"""'

# --- Swift ---
'.source.swift':
  'print()':
    'prefix': 'print'
    'body':   'print("$1")$0'
  'Closure':
    'prefix': 'closure'
    'body':   '{ (${1:parameters}) -> ${2:type} in ${3:body} }$0'
  'Function':
    'prefix': 'func'
    'body':   'func ${1:name}() {\n\t${2://}\n}'
  'Initializer':
    'prefix': 'init'
    'body':   'init() {\n\t${1://}\n}'
  'Class':
    'prefix': 'class'
    'body':   'class ${1:name} {\n\t${2://}\n}'
  'Extension':
    'prefix': 'extension'
    'body':   'extension ${1:type} {\n\t${2://}\n}'
  'Structure':
    'prefix': 'struct'
    'body':   'struct ${1:name} {\n\t${2://}\n}'
  'Enumeration':
    'prefix': 'enum'
    'body':   'enum ${1:name} {\n\t${2://}\n}'
  'Do-Catch Statement':
    'prefix': 'do'
    'body':   '''
      do {
      \t${2://}
      } catch ${1:ErrorType} {
      \t${3://}
      } catch {
      \t${4://}
      }
    '''
  'If Statement':
    'prefix': 'if'
    'body':   'if ${1:condition} {\n\t${2://}\n}'
  'Switch Statement':
    'prefix': 'switch'
    'body':   '''
      switch ${1:value} {
      case ${2:value}:
      \t${3://}
      default:
      \t${4://}
      }
    '''
  'Guard Statement':
    'prefix': 'guard'
    'body':   'guard ${1:expression} else {\n\t${2://}\n}'
  'While Loop':
    'prefix': 'while'
    'body':   'while ${1:condition} {\n\t${2://}\n}'
  'Repeat-While Loop':
    'prefix': 'repeat'
    'body':   'repeat {\n\t${1://}\n} while ${2:condition}'
  'For Loop':
    'prefix': 'cfor'
    'body':   'for ${1:initialization}; ${2:condition}; ${3:incrementer} {\n\t${4://}\n}'
  'For-In Loop':
    'prefix': 'for'
    'body':   'for ${1:i} in ${2:value} {\n\t${3://}\n}'

# --- Java ---
'.source.java':
  'System.out.print':
    'prefix': 'print'
    'body':   'System.out.print($0);'
  'System.out.println':
    'prefix': 'println'
    'body':   'System.out.println($0);'

# --- C ---
'.source.c':
  '#':
    'prefix': '#'
    'body':   '''
      #include <stdio.h>
      $1
      int main(int argc, char **argv) {
      \t$0
      \treturn 0;
      }
    '''
  'if':
    'prefix': 'if'
    'body':   'if (${1:true}) {$0}'
  'for':
    'prefix': 'for'
    'body':   'for (${1:i} = 0; ${1:i} < ${2:size}; ${1:i}++) {\n\t$0\n}'
  'while':
    'prefix': 'while'
    'body':   'while (1) {\n\t$0\n}'
  'switch':
    'prefix': 'switch'
    'body':   '''
      switch ($1) {
      \tcase $2:
      \t\t$0
      \t\tbreak;
      }
    '''
  'typedef':
    'prefix': 'typedef'
    'body':   '''
      typedef struct $1 {
      \tchar name[100];$0
      } ${2:Name};
    '''
  'printf':
    'prefix': 'printf'
    'body':   'printf("%s$1\\\\n", $2);'

# --- HTML ---
'.text.html':
  'table template':
    'prefix': 'table-templ'
    'body':   '''
      <table>
        <thead>
          <tr><th>${1:AAA}</th><th>${2:BBB}</th></tr>
        </thead>
        <tbody>
          <tr><td>foo</td><td>123</td></tr>
          <tr><td>bar</td><td>456</td></tr>
        </tbody>
      </table>
    '''
  'label':
    'prefix': 'label'
    'body':   '<label class="$1" for="$2">$0</label>'
  'input':
    'prefix': 'input'
    'body':   '<input type="$1" id="$2" class="$3" value="$4" />'
  'scriptsrc':
    'prefix': 'scriptsrc'
    'body':   '<script src="$1"></script>'

# --- LaTeX ---
'.text.tex.latex':
  'section':
    'prefix': 'section'
    'body':   '''
      % ==============================================================================
      \\\\section{Section}
    '''
  'subsection':
    'prefix': 'subsection'
    'body':   '''
      % ------------------------------------------------------------------------------
      \\\\subsection{Section}
    '''
  'subsubsection':
    'prefix': 'subsubsection'
    'body':   '''
      % - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
      \\\\subsubsection{Section}
    '''
  'table':
    'prefix': 'make table'
    'body':   '''
    \\\\begin{table}[H]
      \\\\centering
      \\\\caption{${1:Caption}}
      \\\\label{tab:${2:Label}}
      \\\\begin{tabular}{${3:c}} \\\\toprule
        $0\\\\\\\\
        \\\\midrule
        \\\\\\\\
        \\\\bottomrule
      \\\\end{tabular}
    \\\\end{table}$0
    '''
  'tables':
    'prefix': 'make tables'
    'body':   '''
    \\\\begin{table}[H]
      \\\\begin{minipage}{0.5\\\\hsize}
        \\\\centering
        \\\\caption{}
        \\\\label{tab:}
        \\\\begin{tabular}{c} \\\\toprule
          \\\\\\\\
          \\\\midrule
          \\\\\\\\
          \\\\bottomrule
        \\\\end{tabular}
      \\\\end{minipage}
      \\\\begin{minipage}{0.5\\\\hsize}
        \\\\centering
        \\\\caption{}
        \\\\label{tab:}
        \\\\begin{tabular}{c} \\\\toprule
          \\\\\\\\
          \\\\midrule
          \\\\\\\\
          \\\\bottomrule
        \\\\end{tabular}
      \\\\end{minipage}
    \\\\end{table}
    '''
  'figure':
    'prefix': 'make figure'
    'body':   '''
    \\\\begin{figure}[H]
      \\\\centering
      \\\\includegraphics[scale=${1:1.0}]{img/${2:image}}
      \\\\caption{${3:Caption}}
      \\\\label{fig:${2:image}}
    \\\\end{figure}$0
    '''
  'figures':
    'prefix': 'make figures'
    'body':   '''
    \\\\begin{figure}[H]
      \\\\begin{minipage}{0.5\\\\hsize}
        \\\\centering
        \\\\includegraphics[scale=1.0]{img/image}
        \\\\caption{Caption}
        \\\\label{fig:image}
      \\\\end{minipage}
      \\\\begin{minipage}{0.5\\\\hsize}
        \\\\includegraphics[scale=1.0]{img/image}
        \\\\caption{Caption}
        \\\\label{fig:image}
      \\\\end{minipage}
    \\\\end{figure}
    '''
  'rotated figure':
    'prefix': 'make rotated figure'
    'body':   '''
      \\\\begin{figure}[H]
        \\\\centering
        \\\\rotatebox{90}{
          \\\\begin{minipage}[c]{\\\\textheight}
            \\\\includegraphics[scale=1.0]{img/${2:image}}
            \\\\caption{Caption}
            \\\\label{fig:${2:image}}
          \\\\end{minipage}
        }
      \\\\end{figure}
    '''
  'code':
    'prefix': 'make list'
    'body':   '''
      % ~~~ code
      \\\\lstset{ numbers = left }
      \\\\begin{lstlisting}[caption=Caption,label=code:${2}]
      $1
      \\\\end{lstlisting}
      % ~~~
    '''
  'code input':
    'prefix': 'make list input'
    'body':   '''
      \\\\lstset{ numbers = left }
      \\\\lstinputlisting[caption=Caption,label=code:${1}]{${2:file}}
    '''
  'output':
    'prefix': 'make output'
    'body':   '''
      \\\\begin{spacing}{0.8}
      \\\\begin{screen}
      \\\\begin{verbatim}
      $0
      \\\\end{verbatim}
      \\\\end{screen}
      \\\\end{spacing}
    '''
  'bibliography':
    'prefix': 'make bibliography'
    'body':   '''
      \\\\begin{thebibliography}{9}
        \\\\bibitem{${1:KEY}} Authors. ``Title''. Publisher. YYYY-MM-DD. p. NN (pp. NN-NN)
        \\\\bibitem{${2:KEY2}} 作者 (YYYY)『Title』出版社 p. NN (pp. NN-NN)
      \\\\end{thebibliography}
    '''
  'math':
    'prefix': 'math'
    'body':   '\$${1: }\$'

# --- ShellScript ---
'.source.shell':
  'forin':
    'prefix': 'forin'
    'body':   '''
      for ${1:item} in \$${2:array}; do
      \t#$0
      done
    '''

# --- Makefile ---
'.source.makefile':
  'SHELL':
    'prefix': 'SHELL'
    'body':   'SHELL = /bin/sh'
  'PHONY':
    'prefix': 'PHONY'
    'body':   '.PHONY:'
  'SUFFIXES':
    'prefix': 'SUFFIXES'
    'body':   '.SUFFIXES:'
  'SILENT':
    'prefix': 'SILENT'
    'body':   '.SILENT:'
