#!/bin/bash
usage() {
    cat <<HELP
NAME:
   $0 -- {one sentence description}

SYNOPSIS:
  $0 [-h|--help]
  $0 [--verbose]

DESCRIPTION:
   {description here}

  -h  --help      Print this help.
      --verbose   Enables verbose mode.

EXAMPLE:
  {examples if any}

HELP
}

abspath() {
  echo $(cd "$1" && pwd)
}

git-status() {
  repo="$1"

  cd "$repo"
  [[ -d "$PWD/.git" ]] || return

  # branch name
  branch_name=$(basename "`git symbolic-ref HEAD 2> /dev/null`")
  [[ -z "$branch_name" ]] && return

  st=`git status 2>/dev/null`

  # set color
  color=
  if [[ -n `echo "$st" | grep "^nothing to"` ]]; then
    color=32 # green
  elif [[ -n `echo "$st" | grep "^nothing added"` ]]; then
    color=33 # yellow
  elif [[ -n `echo "$st" | grep "^# Untracked"` ]]; then
    color='1;31' # bold_red
  else
    color=31 # red
  fi

  st_branch=`git status --short --branch | head -n1 2>/dev/null`

  repo_basename=$(basename "$repo")
  echo -e "\033[${color}m$repo_basename\033[0m $st_branch"
}


main() {
  SCRIPT_DIR="$(cd $(dirname "$0"); pwd)"
  GIT_REPO_LIST_FILE="$HOME/.watchrepo"

  while getopts w:h OPT
  do
    case "$OPT" in
      h) usage; exit 0;;
      w) VALUE_W="$VALUE_W $OPTARG"
    esac
  done

  shift $((OPTIND - 1))

  if [[ "$VALUE_W" != '' ]]; then
    # add new repo
    for repo in "$VALUE_W"; do
      repo=$(abspath "$repo")
      if [[ ! -d "$repo/.git" ]]; then
        echo "$repo: Not a git repository"
        continue
      fi
      echo "$repo" >> "$GIT_REPO_LIST_FILE"
    done
    return
  fi

  # show repositories status
  if [[ $# == 0 ]]; then
    cat "$GIT_REPO_LIST_FILE" | \
    while read repo; do
      git-status "$repo"
    done
    return
  fi

  
}

main "$@"
