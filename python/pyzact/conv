#!/usr/bin/env python3
#
# ## conv(1) -- convolution
#
# [code](conv)
#
# ### SYNOPSIS
#
#     conv [<cols>]
#
# ### Description
#
# Print whole the inputs as multiple rows with given number of cols.
# Location of each field is shifted over to the left by comparison with one upper line.
# The reason why the name is conv is, the behavior looks like the convolution.
#
# ### Usage
#
#     $ seq 10 | conv 2
#     1 2
#     2 3
#     3 4
#     4 5
#     5 6
#     6 7
#     7 8
#     8 9
#     9 10
#
#     $ yes | awk '$0=NR' | conv 3 | head
#     1 2 3
#     2 3 4
#     3 4 5
#     4 5 6
#     5 6 7
#     .
#     .
#     .
#

import sys
import argparse
import fileinput
import re

sys.path.append('lib')
import utils

utils.exit_by_sigpipe()

# Parse args
parser = argparse.ArgumentParser()
utils.add_common_options(parser)

parser.add_argument(
    'cols', type=int, nargs='?', default=float('inf'),
    help='number of cols')

args = parser.parse_args()
del sys.argv[:]

ifs, ofs = utils.get_iofs(args)

# output
array = []
ifs_regex = re.compile('[%s]' % ifs) if ifs else ''

for line in fileinput.input():
    array.append(line.strip())
    if len(array) >= args.cols:
        print(' '.join(array))
        array.pop(0)
